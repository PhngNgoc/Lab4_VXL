
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e48  08002e48  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e48  08002e48  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000004c  08002e9c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08002e9c  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009504  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c19  00000000  00000000  00029579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f1f  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2fa  00000000  00000000  00043497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824fa  00000000  00000000  0004f791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  000d1ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e10 	.word	0x08002e10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002e10 	.word	0x08002e10

0800014c <isButton1Pressed>:

int button3_pressed = 0;
int button3_long_pressed = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000068 	.word	0x20000068

08000170 <isButton2Pressed>:

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000006c 	.word	0x2000006c

08000194 <getKey1Input>:
	button1_flag = 1;
	button2_flag = 1;
	button3_flag = 1;
}

void getKey1Input(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  KeyReg2_1 = KeyReg1_1;
 8000198:	4b24      	ldr	r3, [pc, #144]	; (800022c <getKey1Input+0x98>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a24      	ldr	r2, [pc, #144]	; (8000230 <getKey1Input+0x9c>)
 800019e:	6013      	str	r3, [r2, #0]
  KeyReg1_1 = KeyReg0_1;
 80001a0:	4b24      	ldr	r3, [pc, #144]	; (8000234 <getKey1Input+0xa0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a21      	ldr	r2, [pc, #132]	; (800022c <getKey1Input+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]
  // Add your key
  KeyReg0_1 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 80001a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ac:	4822      	ldr	r0, [pc, #136]	; (8000238 <getKey1Input+0xa4>)
 80001ae:	f001 fdef 	bl	8001d90 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	461a      	mov	r2, r3
 80001b6:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <getKey1Input+0xa0>)
 80001b8:	601a      	str	r2, [r3, #0]

  if ((KeyReg1_1 == KeyReg0_1) && (KeyReg1_1 == KeyReg2_1)){
 80001ba:	4b1c      	ldr	r3, [pc, #112]	; (800022c <getKey1Input+0x98>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b1d      	ldr	r3, [pc, #116]	; (8000234 <getKey1Input+0xa0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d12f      	bne.n	8000226 <getKey1Input+0x92>
 80001c6:	4b19      	ldr	r3, [pc, #100]	; (800022c <getKey1Input+0x98>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b19      	ldr	r3, [pc, #100]	; (8000230 <getKey1Input+0x9c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d129      	bne.n	8000226 <getKey1Input+0x92>
    if (KeyReg2_1 != KeyReg3_1){
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <getKey1Input+0x9c>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4b19      	ldr	r3, [pc, #100]	; (800023c <getKey1Input+0xa8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d00f      	beq.n	80001fe <getKey1Input+0x6a>
      KeyReg3_1 = KeyReg2_1;
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <getKey1Input+0x9c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a16      	ldr	r2, [pc, #88]	; (800023c <getKey1Input+0xa8>)
 80001e4:	6013      	str	r3, [r2, #0]

      if (KeyReg3_1 == PRESSED_STATE){
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <getKey1Input+0xa8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d11b      	bne.n	8000226 <getKey1Input+0x92>
        TimeOutForKeyPress = 500;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <getKey1Input+0xac>)
 80001f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f4:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button1_flag = 1;
 80001f6:	4b13      	ldr	r3, [pc, #76]	; (8000244 <getKey1Input+0xb0>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
        		button1_flag = 1;
        	}
        }
    }
  }
}
 80001fc:	e013      	b.n	8000226 <getKey1Input+0x92>
        TimeOutForKeyPress --;
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <getKey1Input+0xac>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3b01      	subs	r3, #1
 8000204:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <getKey1Input+0xac>)
 8000206:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000208:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <getKey1Input+0xac>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d10a      	bne.n	8000226 <getKey1Input+0x92>
        	TimeOutForKeyPress = 500;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <getKey1Input+0xac>)
 8000212:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000216:	601a      	str	r2, [r3, #0]
        	if (KeyReg3_1 == PRESSED_STATE){
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <getKey1Input+0xa8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKey1Input+0x92>
        		button1_flag = 1;
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <getKey1Input+0xb0>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000000c 	.word	0x2000000c
 8000230:	20000010 	.word	0x20000010
 8000234:	20000000 	.word	0x20000000
 8000238:	40010800 	.word	0x40010800
 800023c:	20000014 	.word	0x20000014
 8000240:	20000030 	.word	0x20000030
 8000244:	20000068 	.word	0x20000068

08000248 <getKey2Input>:

void getKey2Input(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	  KeyReg2_2 = KeyReg1_2;
 800024c:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <getKey2Input+0x98>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <getKey2Input+0x9c>)
 8000252:	6013      	str	r3, [r2, #0]
	  KeyReg1_2 = KeyReg0_2;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <getKey2Input+0xa0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <getKey2Input+0x98>)
 800025a:	6013      	str	r3, [r2, #0]
	  // Add your key
	  KeyReg0_2 = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 800025c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000260:	4822      	ldr	r0, [pc, #136]	; (80002ec <getKey2Input+0xa4>)
 8000262:	f001 fd95 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <getKey2Input+0xa0>)
 800026c:	601a      	str	r2, [r3, #0]

	  if ((KeyReg1_2 == KeyReg0_2) && (KeyReg1_2 == KeyReg2_2)){
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <getKey2Input+0x98>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <getKey2Input+0xa0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d12f      	bne.n	80002da <getKey2Input+0x92>
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <getKey2Input+0x98>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <getKey2Input+0x9c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d129      	bne.n	80002da <getKey2Input+0x92>
	    if (KeyReg2_2 != KeyReg3_2){
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <getKey2Input+0x9c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <getKey2Input+0xa8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d00f      	beq.n	80002b2 <getKey2Input+0x6a>
	      KeyReg3_2 = KeyReg2_2;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <getKey2Input+0x9c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a16      	ldr	r2, [pc, #88]	; (80002f0 <getKey2Input+0xa8>)
 8000298:	6013      	str	r3, [r2, #0]

	      if (KeyReg3_2 == PRESSED_STATE){
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <getKey2Input+0xa8>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d11b      	bne.n	80002da <getKey2Input+0x92>
	        TimeOutForKeyPress = 500;
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <getKey2Input+0xac>)
 80002a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002a8:	601a      	str	r2, [r3, #0]
	        //subKeyProcess();
	        button2_flag = 1;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <getKey2Input+0xb0>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
	        		button2_flag = 1;
	        	}
	        }
	    }
	  }
}
 80002b0:	e013      	b.n	80002da <getKey2Input+0x92>
	        TimeOutForKeyPress --;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <getKey2Input+0xac>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <getKey2Input+0xac>)
 80002ba:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress == 0){
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <getKey2Input+0xac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10a      	bne.n	80002da <getKey2Input+0x92>
	        	TimeOutForKeyPress = 500;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <getKey2Input+0xac>)
 80002c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ca:	601a      	str	r2, [r3, #0]
	        	if (KeyReg3_2 == PRESSED_STATE){
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <getKey2Input+0xa8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d102      	bne.n	80002da <getKey2Input+0x92>
	        		button2_flag = 1;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <getKey2Input+0xb0>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000018 	.word	0x20000018
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	20000004 	.word	0x20000004
 80002ec:	40010800 	.word	0x40010800
 80002f0:	20000020 	.word	0x20000020
 80002f4:	20000030 	.word	0x20000030
 80002f8:	2000006c 	.word	0x2000006c

080002fc <getKey3Input>:

void getKey3Input(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	  KeyReg2_3 = KeyReg1_3;
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <getKey3Input+0x98>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a24      	ldr	r2, [pc, #144]	; (8000398 <getKey3Input+0x9c>)
 8000306:	6013      	str	r3, [r2, #0]
	  KeyReg1_3 = KeyReg0_3;
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <getKey3Input+0xa0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a21      	ldr	r2, [pc, #132]	; (8000394 <getKey3Input+0x98>)
 800030e:	6013      	str	r3, [r2, #0]
	  // Add your key
	  KeyReg0_3 = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <getKey3Input+0xa4>)
 8000316:	f001 fd3b 	bl	8001d90 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b1f      	ldr	r3, [pc, #124]	; (800039c <getKey3Input+0xa0>)
 8000320:	601a      	str	r2, [r3, #0]

	  if ((KeyReg1_3 == KeyReg0_3) && (KeyReg1_3 == KeyReg2_3)){
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <getKey3Input+0x98>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <getKey3Input+0xa0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d12f      	bne.n	800038e <getKey3Input+0x92>
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <getKey3Input+0x98>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <getKey3Input+0x9c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d129      	bne.n	800038e <getKey3Input+0x92>
	    if (KeyReg2_3 != KeyReg3_3){
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <getKey3Input+0x9c>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <getKey3Input+0xa8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d00f      	beq.n	8000366 <getKey3Input+0x6a>
	      KeyReg3_3 = KeyReg2_3;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <getKey3Input+0x9c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <getKey3Input+0xa8>)
 800034c:	6013      	str	r3, [r2, #0]

	      if (KeyReg3_3 == PRESSED_STATE){
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <getKey3Input+0xa8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d11b      	bne.n	800038e <getKey3Input+0x92>
	        TimeOutForKeyPress = 500;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <getKey3Input+0xac>)
 8000358:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800035c:	601a      	str	r2, [r3, #0]
	        //subKeyProcess();
	        button3_flag = 1;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <getKey3Input+0xb0>)
 8000360:	2201      	movs	r2, #1
 8000362:	601a      	str	r2, [r3, #0]
	        		button3_flag = 1;
	        	}
	        }
	    }
	  }
}
 8000364:	e013      	b.n	800038e <getKey3Input+0x92>
	        TimeOutForKeyPress --;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <getKey3Input+0xac>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <getKey3Input+0xac>)
 800036e:	6013      	str	r3, [r2, #0]
	        if (TimeOutForKeyPress == 0){
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <getKey3Input+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d10a      	bne.n	800038e <getKey3Input+0x92>
	        	TimeOutForKeyPress = 500;
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <getKey3Input+0xac>)
 800037a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800037e:	601a      	str	r2, [r3, #0]
	        	if (KeyReg3_3 == PRESSED_STATE){
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <getKey3Input+0xa8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <getKey3Input+0x92>
	        		button3_flag = 1;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <getKey3Input+0xb0>)
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000024 	.word	0x20000024
 8000398:	20000028 	.word	0x20000028
 800039c:	20000008 	.word	0x20000008
 80003a0:	40010800 	.word	0x40010800
 80003a4:	2000002c 	.word	0x2000002c
 80003a8:	20000030 	.word	0x20000030
 80003ac:	20000070 	.word	0x20000070

080003b0 <change_displaynumber>:
 *      Author: tranm
 */

#include "display7seg.h"

uint8_t change_displaynumber(int num){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
    if (num == 0 ) return 0b01000000;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <change_displaynumber+0x12>
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	e02d      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 1 ) return 0b11111001;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d101      	bne.n	80003cc <change_displaynumber+0x1c>
 80003c8:	23f9      	movs	r3, #249	; 0xf9
 80003ca:	e028      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 2 ) return 0b00100100;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d101      	bne.n	80003d6 <change_displaynumber+0x26>
 80003d2:	2324      	movs	r3, #36	; 0x24
 80003d4:	e023      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 3 ) return 0b00110000;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d101      	bne.n	80003e0 <change_displaynumber+0x30>
 80003dc:	2330      	movs	r3, #48	; 0x30
 80003de:	e01e      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 4 ) return 0b00011001;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d101      	bne.n	80003ea <change_displaynumber+0x3a>
 80003e6:	2319      	movs	r3, #25
 80003e8:	e019      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 5 ) return 0b00010010;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	d101      	bne.n	80003f4 <change_displaynumber+0x44>
 80003f0:	2312      	movs	r3, #18
 80003f2:	e014      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 6 ) return 0b00000010;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b06      	cmp	r3, #6
 80003f8:	d101      	bne.n	80003fe <change_displaynumber+0x4e>
 80003fa:	2302      	movs	r3, #2
 80003fc:	e00f      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 7 ) return 0b01111000;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b07      	cmp	r3, #7
 8000402:	d101      	bne.n	8000408 <change_displaynumber+0x58>
 8000404:	2378      	movs	r3, #120	; 0x78
 8000406:	e00a      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 8 ) return 0b00000000;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b08      	cmp	r3, #8
 800040c:	d101      	bne.n	8000412 <change_displaynumber+0x62>
 800040e:	2300      	movs	r3, #0
 8000410:	e005      	b.n	800041e <change_displaynumber+0x6e>
    if (num == 9 ) return 0b00010000;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b09      	cmp	r3, #9
 8000416:	d101      	bne.n	800041c <change_displaynumber+0x6c>
 8000418:	2310      	movs	r3, #16
 800041a:	e000      	b.n	800041e <change_displaynumber+0x6e>
    return 0b01111111;
 800041c:	237f      	movs	r3, #127	; 0x7f
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <displayled_3and4>:

void displayled_3and4( int num3, int num4) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
    uint8_t data3 = change_displaynumber(num3);
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ffbc 	bl	80003b0 <change_displaynumber>
 8000438:	4603      	mov	r3, r0
 800043a:	72fb      	strb	r3, [r7, #11]
    uint8_t data4 = change_displaynumber(num4);
 800043c:	6838      	ldr	r0, [r7, #0]
 800043e:	f7ff ffb7 	bl	80003b0 <change_displaynumber>
 8000442:	4603      	mov	r3, r0
 8000444:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 8; i++) {
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	e038      	b.n	80004be <displayled_3and4+0x96>
           if ( data3 & (0x80 >> i)) {
 800044c:	7afa      	ldrb	r2, [r7, #11]
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	fa41 f303 	asr.w	r3, r1, r3
 8000456:	4013      	ands	r3, r2
 8000458:	2b00      	cmp	r3, #0
 800045a:	d006      	beq.n	800046a <displayled_3and4+0x42>
               HAL_GPIO_WritePin(led7_3_GPIO_Port, led7_3_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000462:	4820      	ldr	r0, [pc, #128]	; (80004e4 <displayled_3and4+0xbc>)
 8000464:	f001 fcab 	bl	8001dbe <HAL_GPIO_WritePin>
 8000468:	e005      	b.n	8000476 <displayled_3and4+0x4e>
           } else {
               HAL_GPIO_WritePin(led7_3_GPIO_Port, led7_3_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000470:	481c      	ldr	r0, [pc, #112]	; (80004e4 <displayled_3and4+0xbc>)
 8000472:	f001 fca4 	bl	8001dbe <HAL_GPIO_WritePin>
           }
           if ( data4 & (0x80 >> i)) {
 8000476:	7aba      	ldrb	r2, [r7, #10]
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	fa41 f303 	asr.w	r3, r1, r3
 8000480:	4013      	ands	r3, r2
 8000482:	2b00      	cmp	r3, #0
 8000484:	d006      	beq.n	8000494 <displayled_3and4+0x6c>
               HAL_GPIO_WritePin(led7_4_GPIO_Port, led7_4_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048c:	4815      	ldr	r0, [pc, #84]	; (80004e4 <displayled_3and4+0xbc>)
 800048e:	f001 fc96 	bl	8001dbe <HAL_GPIO_WritePin>
 8000492:	e005      	b.n	80004a0 <displayled_3and4+0x78>
           } else {
               HAL_GPIO_WritePin(led7_4_GPIO_Port, led7_4_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800049a:	4812      	ldr	r0, [pc, #72]	; (80004e4 <displayled_3and4+0xbc>)
 800049c:	f001 fc8f 	bl	8001dbe <HAL_GPIO_WritePin>
           }
           // Tạo xung trên SH_CP để dịch bit vào thanh ghi
           HAL_GPIO_WritePin(SH_CP_GPIO_Port, SH_CP_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a6:	480f      	ldr	r0, [pc, #60]	; (80004e4 <displayled_3and4+0xbc>)
 80004a8:	f001 fc89 	bl	8001dbe <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(SH_CP_GPIO_Port, SH_CP_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <displayled_3and4+0xbc>)
 80004b4:	f001 fc83 	bl	8001dbe <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	3301      	adds	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	ddc3      	ble.n	800044c <displayled_3and4+0x24>
       }

       // Tạo xung trên ST_CP để chốt dữ liệu sau khi đã dịch xong 8 bit
       HAL_GPIO_WritePin( ST_CP_GPIO_Port, ST_CP_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <displayled_3and4+0xbc>)
 80004cc:	f001 fc77 	bl	8001dbe <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(ST_CP_GPIO_Port, ST_CP_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d6:	4803      	ldr	r0, [pc, #12]	; (80004e4 <displayled_3and4+0xbc>)
 80004d8:	f001 fc71 	bl	8001dbe <HAL_GPIO_WritePin>

}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800

080004e8 <display7SEG1>:


void display7SEG1(int num){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	f200 8180 	bhi.w	80007f8 <display7SEG1+0x310>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <display7SEG1+0x18>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	08000529 	.word	0x08000529
 8000504:	08000571 	.word	0x08000571
 8000508:	080005b9 	.word	0x080005b9
 800050c:	08000601 	.word	0x08000601
 8000510:	08000649 	.word	0x08000649
 8000514:	08000691 	.word	0x08000691
 8000518:	080006d9 	.word	0x080006d9
 800051c:	08000721 	.word	0x08000721
 8000520:	08000769 	.word	0x08000769
 8000524:	080007b1 	.word	0x080007b1
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2101      	movs	r1, #1
 800052c:	48b4      	ldr	r0, [pc, #720]	; (8000800 <display7SEG1+0x318>)
 800052e:	f001 fc46 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	48b2      	ldr	r0, [pc, #712]	; (8000800 <display7SEG1+0x318>)
 8000538:	f001 fc41 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	48af      	ldr	r0, [pc, #700]	; (8000800 <display7SEG1+0x318>)
 8000542:	f001 fc3c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2108      	movs	r1, #8
 800054a:	48ad      	ldr	r0, [pc, #692]	; (8000800 <display7SEG1+0x318>)
 800054c:	f001 fc37 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	48aa      	ldr	r0, [pc, #680]	; (8000800 <display7SEG1+0x318>)
 8000556:	f001 fc32 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	48a8      	ldr	r0, [pc, #672]	; (8000800 <display7SEG1+0x318>)
 8000560:	f001 fc2d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a5      	ldr	r0, [pc, #660]	; (8000800 <display7SEG1+0x318>)
 800056a:	f001 fc28 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 800056e:	e143      	b.n	80007f8 <display7SEG1+0x310>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	48a2      	ldr	r0, [pc, #648]	; (8000800 <display7SEG1+0x318>)
 8000576:	f001 fc22 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	48a0      	ldr	r0, [pc, #640]	; (8000800 <display7SEG1+0x318>)
 8000580:	f001 fc1d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	489d      	ldr	r0, [pc, #628]	; (8000800 <display7SEG1+0x318>)
 800058a:	f001 fc18 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2108      	movs	r1, #8
 8000592:	489b      	ldr	r0, [pc, #620]	; (8000800 <display7SEG1+0x318>)
 8000594:	f001 fc13 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4898      	ldr	r0, [pc, #608]	; (8000800 <display7SEG1+0x318>)
 800059e:	f001 fc0e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <display7SEG1+0x318>)
 80005a8:	f001 fc09 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4893      	ldr	r0, [pc, #588]	; (8000800 <display7SEG1+0x318>)
 80005b2:	f001 fc04 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80005b6:	e11f      	b.n	80007f8 <display7SEG1+0x310>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4890      	ldr	r0, [pc, #576]	; (8000800 <display7SEG1+0x318>)
 80005be:	f001 fbfe 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	488e      	ldr	r0, [pc, #568]	; (8000800 <display7SEG1+0x318>)
 80005c8:	f001 fbf9 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	488b      	ldr	r0, [pc, #556]	; (8000800 <display7SEG1+0x318>)
 80005d2:	f001 fbf4 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4889      	ldr	r0, [pc, #548]	; (8000800 <display7SEG1+0x318>)
 80005dc:	f001 fbef 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4886      	ldr	r0, [pc, #536]	; (8000800 <display7SEG1+0x318>)
 80005e6:	f001 fbea 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	4884      	ldr	r0, [pc, #528]	; (8000800 <display7SEG1+0x318>)
 80005f0:	f001 fbe5 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4881      	ldr	r0, [pc, #516]	; (8000800 <display7SEG1+0x318>)
 80005fa:	f001 fbe0 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80005fe:	e0fb      	b.n	80007f8 <display7SEG1+0x310>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	487e      	ldr	r0, [pc, #504]	; (8000800 <display7SEG1+0x318>)
 8000606:	f001 fbda 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	487c      	ldr	r0, [pc, #496]	; (8000800 <display7SEG1+0x318>)
 8000610:	f001 fbd5 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4879      	ldr	r0, [pc, #484]	; (8000800 <display7SEG1+0x318>)
 800061a:	f001 fbd0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	4877      	ldr	r0, [pc, #476]	; (8000800 <display7SEG1+0x318>)
 8000624:	f001 fbcb 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4874      	ldr	r0, [pc, #464]	; (8000800 <display7SEG1+0x318>)
 800062e:	f001 fbc6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2120      	movs	r1, #32
 8000636:	4872      	ldr	r0, [pc, #456]	; (8000800 <display7SEG1+0x318>)
 8000638:	f001 fbc1 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	486f      	ldr	r0, [pc, #444]	; (8000800 <display7SEG1+0x318>)
 8000642:	f001 fbbc 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000646:	e0d7      	b.n	80007f8 <display7SEG1+0x310>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	486c      	ldr	r0, [pc, #432]	; (8000800 <display7SEG1+0x318>)
 800064e:	f001 fbb6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	486a      	ldr	r0, [pc, #424]	; (8000800 <display7SEG1+0x318>)
 8000658:	f001 fbb1 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4867      	ldr	r0, [pc, #412]	; (8000800 <display7SEG1+0x318>)
 8000662:	f001 fbac 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2108      	movs	r1, #8
 800066a:	4865      	ldr	r0, [pc, #404]	; (8000800 <display7SEG1+0x318>)
 800066c:	f001 fba7 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4862      	ldr	r0, [pc, #392]	; (8000800 <display7SEG1+0x318>)
 8000676:	f001 fba2 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4860      	ldr	r0, [pc, #384]	; (8000800 <display7SEG1+0x318>)
 8000680:	f001 fb9d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	485d      	ldr	r0, [pc, #372]	; (8000800 <display7SEG1+0x318>)
 800068a:	f001 fb98 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 800068e:	e0b3      	b.n	80007f8 <display7SEG1+0x310>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	485a      	ldr	r0, [pc, #360]	; (8000800 <display7SEG1+0x318>)
 8000696:	f001 fb92 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4858      	ldr	r0, [pc, #352]	; (8000800 <display7SEG1+0x318>)
 80006a0:	f001 fb8d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4855      	ldr	r0, [pc, #340]	; (8000800 <display7SEG1+0x318>)
 80006aa:	f001 fb88 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4853      	ldr	r0, [pc, #332]	; (8000800 <display7SEG1+0x318>)
 80006b4:	f001 fb83 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4850      	ldr	r0, [pc, #320]	; (8000800 <display7SEG1+0x318>)
 80006be:	f001 fb7e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	484e      	ldr	r0, [pc, #312]	; (8000800 <display7SEG1+0x318>)
 80006c8:	f001 fb79 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <display7SEG1+0x318>)
 80006d2:	f001 fb74 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80006d6:	e08f      	b.n	80007f8 <display7SEG1+0x310>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <display7SEG1+0x318>)
 80006de:	f001 fb6e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2102      	movs	r1, #2
 80006e6:	4846      	ldr	r0, [pc, #280]	; (8000800 <display7SEG1+0x318>)
 80006e8:	f001 fb69 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <display7SEG1+0x318>)
 80006f2:	f001 fb64 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	4841      	ldr	r0, [pc, #260]	; (8000800 <display7SEG1+0x318>)
 80006fc:	f001 fb5f 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2110      	movs	r1, #16
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <display7SEG1+0x318>)
 8000706:	f001 fb5a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <display7SEG1+0x318>)
 8000710:	f001 fb55 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <display7SEG1+0x318>)
 800071a:	f001 fb50 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 800071e:	e06b      	b.n	80007f8 <display7SEG1+0x310>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4836      	ldr	r0, [pc, #216]	; (8000800 <display7SEG1+0x318>)
 8000726:	f001 fb4a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <display7SEG1+0x318>)
 8000730:	f001 fb45 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4831      	ldr	r0, [pc, #196]	; (8000800 <display7SEG1+0x318>)
 800073a:	f001 fb40 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2108      	movs	r1, #8
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <display7SEG1+0x318>)
 8000744:	f001 fb3b 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <display7SEG1+0x318>)
 800074e:	f001 fb36 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2120      	movs	r1, #32
 8000756:	482a      	ldr	r0, [pc, #168]	; (8000800 <display7SEG1+0x318>)
 8000758:	f001 fb31 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4827      	ldr	r0, [pc, #156]	; (8000800 <display7SEG1+0x318>)
 8000762:	f001 fb2c 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000766:	e047      	b.n	80007f8 <display7SEG1+0x310>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4824      	ldr	r0, [pc, #144]	; (8000800 <display7SEG1+0x318>)
 800076e:	f001 fb26 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <display7SEG1+0x318>)
 8000778:	f001 fb21 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	481f      	ldr	r0, [pc, #124]	; (8000800 <display7SEG1+0x318>)
 8000782:	f001 fb1c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	481d      	ldr	r0, [pc, #116]	; (8000800 <display7SEG1+0x318>)
 800078c:	f001 fb17 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2110      	movs	r1, #16
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <display7SEG1+0x318>)
 8000796:	f001 fb12 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <display7SEG1+0x318>)
 80007a0:	f001 fb0d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <display7SEG1+0x318>)
 80007aa:	f001 fb08 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80007ae:	e023      	b.n	80007f8 <display7SEG1+0x310>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <display7SEG1+0x318>)
 80007b6:	f001 fb02 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <display7SEG1+0x318>)
 80007c0:	f001 fafd 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <display7SEG1+0x318>)
 80007ca:	f001 faf8 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <display7SEG1+0x318>)
 80007d4:	f001 faf3 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <display7SEG1+0x318>)
 80007de:	f001 faee 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <display7SEG1+0x318>)
 80007e8:	f001 fae9 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <display7SEG1+0x318>)
 80007f2:	f001 fae4 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80007f6:	bf00      	nop
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010c00 	.word	0x40010c00

08000804 <display7SEG2>:
void display7SEG2(int num){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b09      	cmp	r3, #9
 8000810:	f200 81bc 	bhi.w	8000b8c <display7SEG2+0x388>
 8000814:	a201      	add	r2, pc, #4	; (adr r2, 800081c <display7SEG2+0x18>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	08000845 	.word	0x08000845
 8000820:	08000899 	.word	0x08000899
 8000824:	080008ed 	.word	0x080008ed
 8000828:	08000941 	.word	0x08000941
 800082c:	08000995 	.word	0x08000995
 8000830:	080009e9 	.word	0x080009e9
 8000834:	08000a3d 	.word	0x08000a3d
 8000838:	08000a91 	.word	0x08000a91
 800083c:	08000ae5 	.word	0x08000ae5
 8000840:	08000b39 	.word	0x08000b39
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	48d2      	ldr	r0, [pc, #840]	; (8000b94 <display7SEG2+0x390>)
 800084a:	f001 fab8 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	48cf      	ldr	r0, [pc, #828]	; (8000b94 <display7SEG2+0x390>)
 8000856:	f001 fab2 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000860:	48cc      	ldr	r0, [pc, #816]	; (8000b94 <display7SEG2+0x390>)
 8000862:	f001 faac 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	48c9      	ldr	r0, [pc, #804]	; (8000b94 <display7SEG2+0x390>)
 800086e:	f001 faa6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000878:	48c6      	ldr	r0, [pc, #792]	; (8000b94 <display7SEG2+0x390>)
 800087a:	f001 faa0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	48c3      	ldr	r0, [pc, #780]	; (8000b94 <display7SEG2+0x390>)
 8000886:	f001 fa9a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	48c0      	ldr	r0, [pc, #768]	; (8000b94 <display7SEG2+0x390>)
 8000892:	f001 fa94 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000896:	e179      	b.n	8000b8c <display7SEG2+0x388>
		case 1:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	48bd      	ldr	r0, [pc, #756]	; (8000b94 <display7SEG2+0x390>)
 800089e:	f001 fa8e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	48ba      	ldr	r0, [pc, #744]	; (8000b94 <display7SEG2+0x390>)
 80008aa:	f001 fa88 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	48b7      	ldr	r0, [pc, #732]	; (8000b94 <display7SEG2+0x390>)
 80008b6:	f001 fa82 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	48b4      	ldr	r0, [pc, #720]	; (8000b94 <display7SEG2+0x390>)
 80008c2:	f001 fa7c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008cc:	48b1      	ldr	r0, [pc, #708]	; (8000b94 <display7SEG2+0x390>)
 80008ce:	f001 fa76 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d8:	48ae      	ldr	r0, [pc, #696]	; (8000b94 <display7SEG2+0x390>)
 80008da:	f001 fa70 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	48ab      	ldr	r0, [pc, #684]	; (8000b94 <display7SEG2+0x390>)
 80008e6:	f001 fa6a 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80008ea:	e14f      	b.n	8000b8c <display7SEG2+0x388>
		case 2:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	48a8      	ldr	r0, [pc, #672]	; (8000b94 <display7SEG2+0x390>)
 80008f2:	f001 fa64 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	48a5      	ldr	r0, [pc, #660]	; (8000b94 <display7SEG2+0x390>)
 80008fe:	f001 fa5e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	48a2      	ldr	r0, [pc, #648]	; (8000b94 <display7SEG2+0x390>)
 800090a:	f001 fa58 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000914:	489f      	ldr	r0, [pc, #636]	; (8000b94 <display7SEG2+0x390>)
 8000916:	f001 fa52 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	489c      	ldr	r0, [pc, #624]	; (8000b94 <display7SEG2+0x390>)
 8000922:	f001 fa4c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4899      	ldr	r0, [pc, #612]	; (8000b94 <display7SEG2+0x390>)
 800092e:	f001 fa46 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000938:	4896      	ldr	r0, [pc, #600]	; (8000b94 <display7SEG2+0x390>)
 800093a:	f001 fa40 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 800093e:	e125      	b.n	8000b8c <display7SEG2+0x388>
		case 3:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4893      	ldr	r0, [pc, #588]	; (8000b94 <display7SEG2+0x390>)
 8000946:	f001 fa3a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4890      	ldr	r0, [pc, #576]	; (8000b94 <display7SEG2+0x390>)
 8000952:	f001 fa34 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095c:	488d      	ldr	r0, [pc, #564]	; (8000b94 <display7SEG2+0x390>)
 800095e:	f001 fa2e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	488a      	ldr	r0, [pc, #552]	; (8000b94 <display7SEG2+0x390>)
 800096a:	f001 fa28 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4887      	ldr	r0, [pc, #540]	; (8000b94 <display7SEG2+0x390>)
 8000976:	f001 fa22 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000980:	4884      	ldr	r0, [pc, #528]	; (8000b94 <display7SEG2+0x390>)
 8000982:	f001 fa1c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4881      	ldr	r0, [pc, #516]	; (8000b94 <display7SEG2+0x390>)
 800098e:	f001 fa16 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000992:	e0fb      	b.n	8000b8c <display7SEG2+0x388>
		case 4:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	487e      	ldr	r0, [pc, #504]	; (8000b94 <display7SEG2+0x390>)
 800099a:	f001 fa10 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a4:	487b      	ldr	r0, [pc, #492]	; (8000b94 <display7SEG2+0x390>)
 80009a6:	f001 fa0a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	4878      	ldr	r0, [pc, #480]	; (8000b94 <display7SEG2+0x390>)
 80009b2:	f001 fa04 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	4875      	ldr	r0, [pc, #468]	; (8000b94 <display7SEG2+0x390>)
 80009be:	f001 f9fe 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c8:	4872      	ldr	r0, [pc, #456]	; (8000b94 <display7SEG2+0x390>)
 80009ca:	f001 f9f8 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d4:	486f      	ldr	r0, [pc, #444]	; (8000b94 <display7SEG2+0x390>)
 80009d6:	f001 f9f2 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	486c      	ldr	r0, [pc, #432]	; (8000b94 <display7SEG2+0x390>)
 80009e2:	f001 f9ec 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 80009e6:	e0d1      	b.n	8000b8c <display7SEG2+0x388>
		case 5:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4869      	ldr	r0, [pc, #420]	; (8000b94 <display7SEG2+0x390>)
 80009ee:	f001 f9e6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f8:	4866      	ldr	r0, [pc, #408]	; (8000b94 <display7SEG2+0x390>)
 80009fa:	f001 f9e0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4863      	ldr	r0, [pc, #396]	; (8000b94 <display7SEG2+0x390>)
 8000a06:	f001 f9da 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4860      	ldr	r0, [pc, #384]	; (8000b94 <display7SEG2+0x390>)
 8000a12:	f001 f9d4 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	485d      	ldr	r0, [pc, #372]	; (8000b94 <display7SEG2+0x390>)
 8000a1e:	f001 f9ce 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a28:	485a      	ldr	r0, [pc, #360]	; (8000b94 <display7SEG2+0x390>)
 8000a2a:	f001 f9c8 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	4857      	ldr	r0, [pc, #348]	; (8000b94 <display7SEG2+0x390>)
 8000a36:	f001 f9c2 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000a3a:	e0a7      	b.n	8000b8c <display7SEG2+0x388>
		case 6:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	4854      	ldr	r0, [pc, #336]	; (8000b94 <display7SEG2+0x390>)
 8000a42:	f001 f9bc 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4c:	4851      	ldr	r0, [pc, #324]	; (8000b94 <display7SEG2+0x390>)
 8000a4e:	f001 f9b6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	484e      	ldr	r0, [pc, #312]	; (8000b94 <display7SEG2+0x390>)
 8000a5a:	f001 f9b0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a64:	484b      	ldr	r0, [pc, #300]	; (8000b94 <display7SEG2+0x390>)
 8000a66:	f001 f9aa 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a70:	4848      	ldr	r0, [pc, #288]	; (8000b94 <display7SEG2+0x390>)
 8000a72:	f001 f9a4 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4845      	ldr	r0, [pc, #276]	; (8000b94 <display7SEG2+0x390>)
 8000a7e:	f001 f99e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	4842      	ldr	r0, [pc, #264]	; (8000b94 <display7SEG2+0x390>)
 8000a8a:	f001 f998 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000a8e:	e07d      	b.n	8000b8c <display7SEG2+0x388>
		case 7:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	483f      	ldr	r0, [pc, #252]	; (8000b94 <display7SEG2+0x390>)
 8000a96:	f001 f992 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <display7SEG2+0x390>)
 8000aa2:	f001 f98c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	4839      	ldr	r0, [pc, #228]	; (8000b94 <display7SEG2+0x390>)
 8000aae:	f001 f986 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <display7SEG2+0x390>)
 8000aba:	f001 f980 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <display7SEG2+0x390>)
 8000ac6:	f001 f97a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <display7SEG2+0x390>)
 8000ad2:	f001 f974 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	482d      	ldr	r0, [pc, #180]	; (8000b94 <display7SEG2+0x390>)
 8000ade:	f001 f96e 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000ae2:	e053      	b.n	8000b8c <display7SEG2+0x388>
		case 8:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	482a      	ldr	r0, [pc, #168]	; (8000b94 <display7SEG2+0x390>)
 8000aea:	f001 f968 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af4:	4827      	ldr	r0, [pc, #156]	; (8000b94 <display7SEG2+0x390>)
 8000af6:	f001 f962 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4824      	ldr	r0, [pc, #144]	; (8000b94 <display7SEG2+0x390>)
 8000b02:	f001 f95c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <display7SEG2+0x390>)
 8000b0e:	f001 f956 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	481e      	ldr	r0, [pc, #120]	; (8000b94 <display7SEG2+0x390>)
 8000b1a:	f001 f950 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	481b      	ldr	r0, [pc, #108]	; (8000b94 <display7SEG2+0x390>)
 8000b26:	f001 f94a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <display7SEG2+0x390>)
 8000b32:	f001 f944 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000b36:	e029      	b.n	8000b8c <display7SEG2+0x388>
		case 9:
			HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4815      	ldr	r0, [pc, #84]	; (8000b94 <display7SEG2+0x390>)
 8000b3e:	f001 f93e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <display7SEG2+0x390>)
 8000b4a:	f001 f938 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <display7SEG2+0x390>)
 8000b56:	f001 f932 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <display7SEG2+0x390>)
 8000b62:	f001 f92c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <display7SEG2+0x390>)
 8000b6e:	f001 f926 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <display7SEG2+0x390>)
 8000b7a:	f001 f920 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <display7SEG2+0x390>)
 8000b86:	f001 f91a 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000b8a:	bf00      	nop
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <fsm_automatic>:
int count1;
int count2;



void fsm_automatic(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	displayled_3and4(count1/10, count1%10);
 8000b9c:	4ba9      	ldr	r3, [pc, #676]	; (8000e44 <fsm_automatic+0x2ac>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4aa9      	ldr	r2, [pc, #676]	; (8000e48 <fsm_automatic+0x2b0>)
 8000ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba6:	1092      	asrs	r2, r2, #2
 8000ba8:	17db      	asrs	r3, r3, #31
 8000baa:	1ad0      	subs	r0, r2, r3
 8000bac:	4ba5      	ldr	r3, [pc, #660]	; (8000e44 <fsm_automatic+0x2ac>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4ba5      	ldr	r3, [pc, #660]	; (8000e48 <fsm_automatic+0x2b0>)
 8000bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb6:	1099      	asrs	r1, r3, #2
 8000bb8:	17d3      	asrs	r3, r2, #31
 8000bba:	1ac9      	subs	r1, r1, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1ad1      	subs	r1, r2, r3
 8000bc6:	f7ff fc2f 	bl	8000428 <displayled_3and4>
	display7SEG2(count2 % 10);
 8000bca:	4ba0      	ldr	r3, [pc, #640]	; (8000e4c <fsm_automatic+0x2b4>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b9e      	ldr	r3, [pc, #632]	; (8000e48 <fsm_automatic+0x2b0>)
 8000bd0:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd4:	1099      	asrs	r1, r3, #2
 8000bd6:	17d3      	asrs	r3, r2, #31
 8000bd8:	1ac9      	subs	r1, r1, r3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	1ad1      	subs	r1, r2, r3
 8000be4:	4608      	mov	r0, r1
 8000be6:	f7ff fe0d 	bl	8000804 <display7SEG2>
	display7SEG1(count2 / 10);
 8000bea:	4b98      	ldr	r3, [pc, #608]	; (8000e4c <fsm_automatic+0x2b4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a96      	ldr	r2, [pc, #600]	; (8000e48 <fsm_automatic+0x2b0>)
 8000bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf4:	1092      	asrs	r2, r2, #2
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fc74 	bl	80004e8 <display7SEG1>
	switch (status1) {
 8000c00:	4b93      	ldr	r3, [pc, #588]	; (8000e50 <fsm_automatic+0x2b8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	f200 8083 	bhi.w	8000d12 <fsm_automatic+0x17a>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <fsm_automatic+0x7c>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c25 	.word	0x08000c25
 8000c18:	08000c53 	.word	0x08000c53
 8000c1c:	08000c93 	.word	0x08000c93
 8000c20:	08000cd3 	.word	0x08000cd3
			case INIT:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	488a      	ldr	r0, [pc, #552]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c2a:	f001 f8c8 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2108      	movs	r1, #8
 8000c32:	4888      	ldr	r0, [pc, #544]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c34:	f001 f8c3 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4885      	ldr	r0, [pc, #532]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c3e:	f001 f8be 	bl	8001dbe <HAL_GPIO_WritePin>
				status1 = AUTO_GREEN;
 8000c42:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <fsm_automatic+0x2b8>)
 8000c44:	2203      	movs	r2, #3
 8000c46:	601a      	str	r2, [r3, #0]
				count1 = time_green;
 8000c48:	4b83      	ldr	r3, [pc, #524]	; (8000e58 <fsm_automatic+0x2c0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a7d      	ldr	r2, [pc, #500]	; (8000e44 <fsm_automatic+0x2ac>)
 8000c4e:	6013      	str	r3, [r2, #0]
				break;
 8000c50:	e066      	b.n	8000d20 <fsm_automatic+0x188>
			case AUTO_RED:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	487f      	ldr	r0, [pc, #508]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c58:	f001 f8b1 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2108      	movs	r1, #8
 8000c60:	487c      	ldr	r0, [pc, #496]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c62:	f001 f8ac 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2104      	movs	r1, #4
 8000c6a:	487a      	ldr	r0, [pc, #488]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c6c:	f001 f8a7 	bl	8001dbe <HAL_GPIO_WritePin>
				count1--;
 8000c70:	4b74      	ldr	r3, [pc, #464]	; (8000e44 <fsm_automatic+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	4a73      	ldr	r2, [pc, #460]	; (8000e44 <fsm_automatic+0x2ac>)
 8000c78:	6013      	str	r3, [r2, #0]
				if ( count1 == 0 ){
 8000c7a:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <fsm_automatic+0x2ac>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d149      	bne.n	8000d16 <fsm_automatic+0x17e>
					status1 = AUTO_GREEN;
 8000c82:	4b73      	ldr	r3, [pc, #460]	; (8000e50 <fsm_automatic+0x2b8>)
 8000c84:	2203      	movs	r2, #3
 8000c86:	601a      	str	r2, [r3, #0]
					count1 = time_green;
 8000c88:	4b73      	ldr	r3, [pc, #460]	; (8000e58 <fsm_automatic+0x2c0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a6d      	ldr	r2, [pc, #436]	; (8000e44 <fsm_automatic+0x2ac>)
 8000c8e:	6013      	str	r3, [r2, #0]
				}
				break;
 8000c90:	e041      	b.n	8000d16 <fsm_automatic+0x17e>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2102      	movs	r1, #2
 8000c96:	486f      	ldr	r0, [pc, #444]	; (8000e54 <fsm_automatic+0x2bc>)
 8000c98:	f001 f891 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	486c      	ldr	r0, [pc, #432]	; (8000e54 <fsm_automatic+0x2bc>)
 8000ca2:	f001 f88c 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2104      	movs	r1, #4
 8000caa:	486a      	ldr	r0, [pc, #424]	; (8000e54 <fsm_automatic+0x2bc>)
 8000cac:	f001 f887 	bl	8001dbe <HAL_GPIO_WritePin>
				count1--;
 8000cb0:	4b64      	ldr	r3, [pc, #400]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4a63      	ldr	r2, [pc, #396]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cb8:	6013      	str	r3, [r2, #0]
				if ( count1 == 0 ){
 8000cba:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d12b      	bne.n	8000d1a <fsm_automatic+0x182>
					status1 = AUTO_YELLOW;
 8000cc2:	4b63      	ldr	r3, [pc, #396]	; (8000e50 <fsm_automatic+0x2b8>)
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	601a      	str	r2, [r3, #0]
					count1 = time_yellow;
 8000cc8:	4b64      	ldr	r3, [pc, #400]	; (8000e5c <fsm_automatic+0x2c4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a5d      	ldr	r2, [pc, #372]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cce:	6013      	str	r3, [r2, #0]
				}
				break;
 8000cd0:	e023      	b.n	8000d1a <fsm_automatic+0x182>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	485f      	ldr	r0, [pc, #380]	; (8000e54 <fsm_automatic+0x2bc>)
 8000cd8:	f001 f871 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2108      	movs	r1, #8
 8000ce0:	485c      	ldr	r0, [pc, #368]	; (8000e54 <fsm_automatic+0x2bc>)
 8000ce2:	f001 f86c 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	485a      	ldr	r0, [pc, #360]	; (8000e54 <fsm_automatic+0x2bc>)
 8000cec:	f001 f867 	bl	8001dbe <HAL_GPIO_WritePin>
				count1--;
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	4a53      	ldr	r2, [pc, #332]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cf8:	6013      	str	r3, [r2, #0]
				if ( count1 == 0 ){
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <fsm_automatic+0x2ac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10d      	bne.n	8000d1e <fsm_automatic+0x186>
					status1 = AUTO_RED;
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <fsm_automatic+0x2b8>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	601a      	str	r2, [r3, #0]
					count1 = time_red;
 8000d08:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <fsm_automatic+0x2c8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <fsm_automatic+0x2ac>)
 8000d0e:	6013      	str	r3, [r2, #0]
				}
				break;
 8000d10:	e005      	b.n	8000d1e <fsm_automatic+0x186>
			default:
				break;
 8000d12:	bf00      	nop
 8000d14:	e004      	b.n	8000d20 <fsm_automatic+0x188>
				break;
 8000d16:	bf00      	nop
 8000d18:	e002      	b.n	8000d20 <fsm_automatic+0x188>
				break;
 8000d1a:	bf00      	nop
 8000d1c:	e000      	b.n	8000d20 <fsm_automatic+0x188>
				break;
 8000d1e:	bf00      	nop
		}
	switch (status2) {
 8000d20:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <fsm_automatic+0x2cc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	f200 8083 	bhi.w	8000e32 <fsm_automatic+0x29a>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <fsm_automatic+0x19c>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d73 	.word	0x08000d73
 8000d3c:	08000db3 	.word	0x08000db3
 8000d40:	08000df3 	.word	0x08000df3
			case INIT:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4842      	ldr	r0, [pc, #264]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d4a:	f001 f838 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	4840      	ldr	r0, [pc, #256]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d54:	f001 f833 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	483d      	ldr	r0, [pc, #244]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d5e:	f001 f82e 	bl	8001dbe <HAL_GPIO_WritePin>
				status2 = AUTO_RED;
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <fsm_automatic+0x2cc>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	601a      	str	r2, [r3, #0]
				count2 = time_red;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <fsm_automatic+0x2c8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <fsm_automatic+0x2b4>)
 8000d6e:	6013      	str	r3, [r2, #0]
				break;
 8000d70:	e066      	b.n	8000e40 <fsm_automatic+0x2a8>
			case AUTO_RED:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	4837      	ldr	r0, [pc, #220]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d78:	f001 f821 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4834      	ldr	r0, [pc, #208]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d82:	f001 f81c 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4832      	ldr	r0, [pc, #200]	; (8000e54 <fsm_automatic+0x2bc>)
 8000d8c:	f001 f817 	bl	8001dbe <HAL_GPIO_WritePin>
				count2--;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <fsm_automatic+0x2b4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <fsm_automatic+0x2b4>)
 8000d98:	6013      	str	r3, [r2, #0]
				if ( count2 == 0 ){
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <fsm_automatic+0x2b4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d149      	bne.n	8000e36 <fsm_automatic+0x29e>
					status2 = AUTO_GREEN;
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <fsm_automatic+0x2cc>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	601a      	str	r2, [r3, #0]
					count2 = time_green;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <fsm_automatic+0x2c0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <fsm_automatic+0x2b4>)
 8000dae:	6013      	str	r3, [r2, #0]
				}
				break;
 8000db0:	e041      	b.n	8000e36 <fsm_automatic+0x29e>
			case AUTO_GREEN:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2110      	movs	r1, #16
 8000db6:	4827      	ldr	r0, [pc, #156]	; (8000e54 <fsm_automatic+0x2bc>)
 8000db8:	f001 f801 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4824      	ldr	r0, [pc, #144]	; (8000e54 <fsm_automatic+0x2bc>)
 8000dc2:	f000 fffc 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4822      	ldr	r0, [pc, #136]	; (8000e54 <fsm_automatic+0x2bc>)
 8000dcc:	f000 fff7 	bl	8001dbe <HAL_GPIO_WritePin>
				count2--;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <fsm_automatic+0x2b4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <fsm_automatic+0x2b4>)
 8000dd8:	6013      	str	r3, [r2, #0]
				if ( count2 == 0 ){
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <fsm_automatic+0x2b4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d12b      	bne.n	8000e3a <fsm_automatic+0x2a2>
					status2 = AUTO_YELLOW;
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <fsm_automatic+0x2cc>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	601a      	str	r2, [r3, #0]
					count2 = time_yellow;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <fsm_automatic+0x2c4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <fsm_automatic+0x2b4>)
 8000dee:	6013      	str	r3, [r2, #0]
				}
				break;
 8000df0:	e023      	b.n	8000e3a <fsm_automatic+0x2a2>
			case AUTO_YELLOW:
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2110      	movs	r1, #16
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <fsm_automatic+0x2bc>)
 8000df8:	f000 ffe1 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	4814      	ldr	r0, [pc, #80]	; (8000e54 <fsm_automatic+0x2bc>)
 8000e02:	f000 ffdc 	bl	8001dbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	4812      	ldr	r0, [pc, #72]	; (8000e54 <fsm_automatic+0x2bc>)
 8000e0c:	f000 ffd7 	bl	8001dbe <HAL_GPIO_WritePin>
				count2--;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <fsm_automatic+0x2b4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <fsm_automatic+0x2b4>)
 8000e18:	6013      	str	r3, [r2, #0]
				if ( count2 == 0 ){
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <fsm_automatic+0x2b4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <fsm_automatic+0x2a6>
					status2 = AUTO_RED;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <fsm_automatic+0x2cc>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
					count2 = time_red;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <fsm_automatic+0x2c8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <fsm_automatic+0x2b4>)
 8000e2e:	6013      	str	r3, [r2, #0]
				}
				break;
 8000e30:	e005      	b.n	8000e3e <fsm_automatic+0x2a6>
			default:
				break;
 8000e32:	bf00      	nop
 8000e34:	e004      	b.n	8000e40 <fsm_automatic+0x2a8>
				break;
 8000e36:	bf00      	nop
 8000e38:	e002      	b.n	8000e40 <fsm_automatic+0x2a8>
				break;
 8000e3a:	bf00      	nop
 8000e3c:	e000      	b.n	8000e40 <fsm_automatic+0x2a8>
				break;
 8000e3e:	bf00      	nop
		}

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000088 	.word	0x20000088
 8000e48:	66666667 	.word	0x66666667
 8000e4c:	20000084 	.word	0x20000084
 8000e50:	20000074 	.word	0x20000074
 8000e54:	40010800 	.word	0x40010800
 8000e58:	2000003c 	.word	0x2000003c
 8000e5c:	20000038 	.word	0x20000038
 8000e60:	20000034 	.word	0x20000034
 8000e64:	20000078 	.word	0x20000078

08000e68 <turn_off>:
 *      Author: tranm
 */

#include "fsm_manual.h"

void turn_off(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2102      	movs	r1, #2
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <turn_off+0x44>)
 8000e72:	f000 ffa4 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2110      	movs	r1, #16
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <turn_off+0x44>)
 8000e7c:	f000 ff9f 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2108      	movs	r1, #8
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <turn_off+0x44>)
 8000e86:	f000 ff9a 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2140      	movs	r1, #64	; 0x40
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <turn_off+0x44>)
 8000e90:	f000 ff95 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2104      	movs	r1, #4
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <turn_off+0x44>)
 8000e9a:	f000 ff90 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <turn_off+0x44>)
 8000ea4:	f000 ff8b 	bl	8001dbe <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010800 	.word	0x40010800

08000eb0 <fsm_manual>:

void fsm_manual(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	switch(status){
 8000eb4:	4b8e      	ldr	r3, [pc, #568]	; (80010f0 <fsm_manual+0x240>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	2b16      	cmp	r3, #22
 8000ebc:	f200 810f 	bhi.w	80010de <fsm_manual+0x22e>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <fsm_manual+0x18>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000f25 	.word	0x08000f25
 8000ecc:	080010df 	.word	0x080010df
 8000ed0:	080010df 	.word	0x080010df
 8000ed4:	080010df 	.word	0x080010df
 8000ed8:	080010df 	.word	0x080010df
 8000edc:	080010df 	.word	0x080010df
 8000ee0:	080010df 	.word	0x080010df
 8000ee4:	080010df 	.word	0x080010df
 8000ee8:	080010df 	.word	0x080010df
 8000eec:	080010df 	.word	0x080010df
 8000ef0:	080010df 	.word	0x080010df
 8000ef4:	080010df 	.word	0x080010df
 8000ef8:	080010df 	.word	0x080010df
 8000efc:	080010df 	.word	0x080010df
 8000f00:	080010df 	.word	0x080010df
 8000f04:	080010df 	.word	0x080010df
 8000f08:	080010df 	.word	0x080010df
 8000f0c:	080010df 	.word	0x080010df
 8000f10:	080010df 	.word	0x080010df
 8000f14:	08000f47 	.word	0x08000f47
 8000f18:	08000f69 	.word	0x08000f69
 8000f1c:	08000fe5 	.word	0x08000fe5
 8000f20:	0800105f 	.word	0x0800105f
		case INIT:
			if (isButton1Pressed() == 1){
 8000f24:	f7ff f912 	bl	800014c <isButton1Pressed>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d104      	bne.n	8000f38 <fsm_manual+0x88>
				status = MODE1;
 8000f2e:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <fsm_manual+0x240>)
 8000f30:	2214      	movs	r2, #20
 8000f32:	601a      	str	r2, [r3, #0]
				turn_off();
 8000f34:	f7ff ff98 	bl	8000e68 <turn_off>
			}
			status1 = INIT;
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <fsm_manual+0x244>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8000f3e:	4b6e      	ldr	r3, [pc, #440]	; (80010f8 <fsm_manual+0x248>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
			break;
 8000f44:	e0d2      	b.n	80010ec <fsm_manual+0x23c>
		case MODE1:
			 fsm_automatic();
 8000f46:	f7ff fe27 	bl	8000b98 <fsm_automatic>
			 if (isButton1Pressed() == 1){
 8000f4a:	f7ff f8ff 	bl	800014c <isButton1Pressed>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	f040 80c6 	bne.w	80010e2 <fsm_manual+0x232>
				 status = MODE2;
 8000f56:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <fsm_manual+0x240>)
 8000f58:	2215      	movs	r2, #21
 8000f5a:	601a      	str	r2, [r3, #0]
				 turn_off();
 8000f5c:	f7ff ff84 	bl	8000e68 <turn_off>
				 time_red = 0;
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <fsm_manual+0x24c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			 }
			break;
 8000f66:	e0bc      	b.n	80010e2 <fsm_manual+0x232>
		case MODE2:
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4865      	ldr	r0, [pc, #404]	; (8001100 <fsm_manual+0x250>)
 8000f6c:	f000 ff3f 	bl	8001dee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000f70:	2110      	movs	r1, #16
 8000f72:	4863      	ldr	r0, [pc, #396]	; (8001100 <fsm_manual+0x250>)
 8000f74:	f000 ff3b 	bl	8001dee <HAL_GPIO_TogglePin>
			 if(isButton2Pressed() == 1) time_red++;
 8000f78:	f7ff f8fa 	bl	8000170 <isButton2Pressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <fsm_manual+0xdc>
 8000f82:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <fsm_manual+0x24c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a5c      	ldr	r2, [pc, #368]	; (80010fc <fsm_manual+0x24c>)
 8000f8a:	6013      	str	r3, [r2, #0]
			 display7SEG2(2);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff fc39 	bl	8000804 <display7SEG2>
			 display7SEG1(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff faa8 	bl	80004e8 <display7SEG1>
			 displayled_3and4(time_red/10, time_red%10);
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <fsm_manual+0x24c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a59      	ldr	r2, [pc, #356]	; (8001104 <fsm_manual+0x254>)
 8000f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa2:	1092      	asrs	r2, r2, #2
 8000fa4:	17db      	asrs	r3, r3, #31
 8000fa6:	1ad0      	subs	r0, r2, r3
 8000fa8:	4b54      	ldr	r3, [pc, #336]	; (80010fc <fsm_manual+0x24c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <fsm_manual+0x254>)
 8000fae:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb2:	1099      	asrs	r1, r3, #2
 8000fb4:	17d3      	asrs	r3, r2, #31
 8000fb6:	1ac9      	subs	r1, r1, r3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad1      	subs	r1, r2, r3
 8000fc2:	f7ff fa31 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 8000fc6:	f7ff f8c1 	bl	800014c <isButton1Pressed>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	f040 808a 	bne.w	80010e6 <fsm_manual+0x236>
				 status = MODE3;
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <fsm_manual+0x240>)
 8000fd4:	2216      	movs	r2, #22
 8000fd6:	601a      	str	r2, [r3, #0]
				 turn_off();
 8000fd8:	f7ff ff46 	bl	8000e68 <turn_off>
				 time_yellow = 0;
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <fsm_manual+0x258>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			 }
			break;
 8000fe2:	e080      	b.n	80010e6 <fsm_manual+0x236>
		case MODE3:
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4846      	ldr	r0, [pc, #280]	; (8001100 <fsm_manual+0x250>)
 8000fe8:	f000 ff01 	bl	8001dee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000fec:	2120      	movs	r1, #32
 8000fee:	4844      	ldr	r0, [pc, #272]	; (8001100 <fsm_manual+0x250>)
 8000ff0:	f000 fefd 	bl	8001dee <HAL_GPIO_TogglePin>
			 if(isButton2Pressed() == 1) time_yellow++;
 8000ff4:	f7ff f8bc 	bl	8000170 <isButton2Pressed>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d104      	bne.n	8001008 <fsm_manual+0x158>
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <fsm_manual+0x258>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a40      	ldr	r2, [pc, #256]	; (8001108 <fsm_manual+0x258>)
 8001006:	6013      	str	r3, [r2, #0]
			 display7SEG2(3);
 8001008:	2003      	movs	r0, #3
 800100a:	f7ff fbfb 	bl	8000804 <display7SEG2>
			 display7SEG1(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fa6a 	bl	80004e8 <display7SEG1>
			 displayled_3and4(time_yellow/10, time_yellow%10);
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <fsm_manual+0x258>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <fsm_manual+0x254>)
 800101a:	fb82 1203 	smull	r1, r2, r2, r3
 800101e:	1092      	asrs	r2, r2, #2
 8001020:	17db      	asrs	r3, r3, #31
 8001022:	1ad0      	subs	r0, r2, r3
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <fsm_manual+0x258>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <fsm_manual+0x254>)
 800102a:	fb83 1302 	smull	r1, r3, r3, r2
 800102e:	1099      	asrs	r1, r3, #2
 8001030:	17d3      	asrs	r3, r2, #31
 8001032:	1ac9      	subs	r1, r1, r3
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1ad1      	subs	r1, r2, r3
 800103e:	f7ff f9f3 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 8001042:	f7ff f883 	bl	800014c <isButton1Pressed>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d14e      	bne.n	80010ea <fsm_manual+0x23a>
				 status = MODE4;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <fsm_manual+0x240>)
 800104e:	2217      	movs	r2, #23
 8001050:	601a      	str	r2, [r3, #0]
				 turn_off();
 8001052:	f7ff ff09 	bl	8000e68 <turn_off>
				 time_green = 0;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <fsm_manual+0x25c>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
			 }
			break;
 800105c:	e045      	b.n	80010ea <fsm_manual+0x23a>
		case MODE4:
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800105e:	2108      	movs	r1, #8
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <fsm_manual+0x250>)
 8001062:	f000 fec4 	bl	8001dee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <fsm_manual+0x250>)
 800106a:	f000 fec0 	bl	8001dee <HAL_GPIO_TogglePin>
			if(isButton2Pressed() == 1) time_green++;
 800106e:	f7ff f87f 	bl	8000170 <isButton2Pressed>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d104      	bne.n	8001082 <fsm_manual+0x1d2>
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <fsm_manual+0x25c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a23      	ldr	r2, [pc, #140]	; (800110c <fsm_manual+0x25c>)
 8001080:	6013      	str	r3, [r2, #0]
			display7SEG2(4);
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff fbbe 	bl	8000804 <display7SEG2>
			display7SEG1(0);
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff fa2d 	bl	80004e8 <display7SEG1>
			displayled_3and4(time_green/10, time_green%10);
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <fsm_manual+0x25c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <fsm_manual+0x254>)
 8001094:	fb82 1203 	smull	r1, r2, r2, r3
 8001098:	1092      	asrs	r2, r2, #2
 800109a:	17db      	asrs	r3, r3, #31
 800109c:	1ad0      	subs	r0, r2, r3
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <fsm_manual+0x25c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <fsm_manual+0x254>)
 80010a4:	fb83 1302 	smull	r1, r3, r3, r2
 80010a8:	1099      	asrs	r1, r3, #2
 80010aa:	17d3      	asrs	r3, r2, #31
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	460b      	mov	r3, r1
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	1ad1      	subs	r1, r2, r3
 80010b8:	f7ff f9b6 	bl	8000428 <displayled_3and4>
			 if (isButton1Pressed() == 1){
 80010bc:	f7ff f846 	bl	800014c <isButton1Pressed>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d104      	bne.n	80010d0 <fsm_manual+0x220>
				 status = MODE1;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <fsm_manual+0x240>)
 80010c8:	2214      	movs	r2, #20
 80010ca:	601a      	str	r2, [r3, #0]
				 turn_off();
 80010cc:	f7ff fecc 	bl	8000e68 <turn_off>
			 }
			 status1 = INIT;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <fsm_manual+0x244>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			 status2 = INIT;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <fsm_manual+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
			break;
 80010dc:	e006      	b.n	80010ec <fsm_manual+0x23c>
		default:
			break;
 80010de:	bf00      	nop
 80010e0:	e004      	b.n	80010ec <fsm_manual+0x23c>
			break;
 80010e2:	bf00      	nop
 80010e4:	e002      	b.n	80010ec <fsm_manual+0x23c>
			break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <fsm_manual+0x23c>
			break;
 80010ea:	bf00      	nop
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	20000074 	.word	0x20000074
 80010f8:	20000078 	.word	0x20000078
 80010fc:	20000034 	.word	0x20000034
 8001100:	40010800 	.word	0x40010800
 8001104:	66666667 	.word	0x66666667
 8001108:	20000038 	.word	0x20000038
 800110c:	2000003c 	.word	0x2000003c

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fb52 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f830 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f000 f8b6 	bl	800128c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001120:	f000 f868 	bl	80011f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <main+0x54>)
 8001126:	f001 fab3 	bl	8002690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 SCH_Init();
 800112a:	f000 f923 	bl	8001374 <SCH_Init>
 SCH_Add_Task(fsm_manual, 0, 100);
 800112e:	2264      	movs	r2, #100	; 0x64
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <main+0x58>)
 8001134:	f000 f9a6 	bl	8001484 <SCH_Add_Task>
 SCH_Add_Task(getKey1Input, 0, 5);
 8001138:	2205      	movs	r2, #5
 800113a:	2100      	movs	r1, #0
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <main+0x5c>)
 800113e:	f000 f9a1 	bl	8001484 <SCH_Add_Task>
 SCH_Add_Task(getKey2Input, 0, 5);
 8001142:	2205      	movs	r2, #5
 8001144:	2100      	movs	r1, #0
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <main+0x60>)
 8001148:	f000 f99c 	bl	8001484 <SCH_Add_Task>
 SCH_Add_Task(getKey3Input, 0, 5);
 800114c:	2205      	movs	r2, #5
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <main+0x64>)
 8001152:	f000 f997 	bl	8001484 <SCH_Add_Task>
 status = INIT;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <main+0x68>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800115c:	f000 f9e4 	bl	8001528 <SCH_Dispatch_Tasks>
 8001160:	e7fc      	b.n	800115c <main+0x4c>
 8001162:	bf00      	nop
 8001164:	2000008c 	.word	0x2000008c
 8001168:	08000eb1 	.word	0x08000eb1
 800116c:	08000195 	.word	0x08000195
 8001170:	08000249 	.word	0x08000249
 8001174:	080002fd 	.word	0x080002fd
 8001178:	2000007c 	.word	0x2000007c

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fe38 	bl	8002e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2310      	movs	r3, #16
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fe34 	bl	8001e20 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011be:	f000 f8d3 	bl	8001368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f8a0 	bl	8002320 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011e6:	f000 f8bf 	bl	8001368 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM2_Init+0x94>)
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM2_Init+0x94>)
 800121a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800121e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM2_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM2_Init+0x94>)
 8001228:	2209      	movs	r2, #9
 800122a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM2_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM2_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM2_Init+0x94>)
 800123a:	f001 f9d9 	bl	80025f0 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001244:	f000 f890 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM2_Init+0x94>)
 8001256:	f001 fb6f 	bl	8002938 <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 f882 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM2_Init+0x94>)
 8001272:	f001 fd37 	bl	8002ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 f874 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000008c 	.word	0x2000008c

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80012d0:	2200      	movs	r2, #0
 80012d2:	f24f 017e 	movw	r1, #61566	; 0xf07e
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <MX_GPIO_Init+0xc0>)
 80012d8:	f000 fd71 	bl	8001dbe <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SH_CP_Pin|ST_CP_Pin
                          |led7_3_Pin|led7_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 80012dc:	2200      	movs	r2, #0
 80012de:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <MX_GPIO_Init+0xc4>)
 80012e4:	f000 fd6b 	bl	8001dbe <HAL_GPIO_WritePin>
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SH_CP_Pin ST_CP_Pin
                           led7_3_Pin led7_4_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80012e8:	f24f 037e 	movw	r3, #61566	; 0xf07e
 80012ec:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SH_CP_Pin|ST_CP_Pin
                          |led7_3_Pin|led7_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_GPIO_Init+0xc0>)
 8001302:	f000 fbcb 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8001306:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800130a:	60bb      	str	r3, [r7, #8]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <MX_GPIO_Init+0xc4>)
 8001320:	f000 fbbc 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001324:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0xc0>)
 800133a:	f000 fbaf 	bl	8001a9c <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800
 8001350:	40010c00 	.word	0x40010c00

08001354 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800135c:	f000 f824 	bl	80013a8 <SCH_Update>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;


void SCH_Init(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	e006      	b.n	800138e <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f91c 	bl	80015c0 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3301      	adds	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b27      	cmp	r3, #39	; 0x27
 8001392:	d9f5      	bls.n	8001380 <SCH_Init+0xc>
    }
    // Reset the global error variable
    // - SCH_Delete_Task() will generate an error code,
    // (because the task array is empty)
    Error_code_G = 0;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <SCH_Init+0x30>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000080 	.word	0x20000080

080013a8 <SCH_Update>:

void SCH_Update(){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
    unsigned char Index;
    // NOTE: calculations are in *TICKS* (not milliseconds)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e05c      	b.n	800146e <SCH_Update+0xc6>
        // Check if there is a task at this location
        if ( SCH_tasks_G[Index].pTask != 0 ){
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	4932      	ldr	r1, [pc, #200]	; (8001480 <SCH_Update+0xd8>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d04f      	beq.n	8001468 <SCH_Update+0xc0>

            if (SCH_tasks_G[Index].Delay == 0) {
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	492d      	ldr	r1, [pc, #180]	; (8001480 <SCH_Update+0xd8>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	3304      	adds	r3, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d132      	bne.n	8001444 <SCH_Update+0x9c>
                // The task is due to run
                // Inc. the 'RunMe' flag

                SCH_tasks_G[Index].RunMe += 1;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4927      	ldr	r1, [pc, #156]	; (8001480 <SCH_Update+0xd8>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	4922      	ldr	r1, [pc, #136]	; (8001480 <SCH_Update+0xd8>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	330c      	adds	r3, #12
 8001404:	4602      	mov	r2, r0
 8001406:	701a      	strb	r2, [r3, #0]
                if ( SCH_tasks_G[Index].Period > 0 ) {
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	491d      	ldr	r1, [pc, #116]	; (8001480 <SCH_Update+0xd8>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3308      	adds	r3, #8
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d024      	beq.n	8001468 <SCH_Update+0xc0>
                    // Schedule periodic tasks to run again
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800141e:	79f9      	ldrb	r1, [r7, #7]
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4817      	ldr	r0, [pc, #92]	; (8001480 <SCH_Update+0xd8>)
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4403      	add	r3, r0
 800142e:	3308      	adds	r3, #8
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <SCH_Update+0xd8>)
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4403      	add	r3, r0
 800143e:	3304      	adds	r3, #4
 8001440:	6019      	str	r1, [r3, #0]
 8001442:	e011      	b.n	8001468 <SCH_Update+0xc0>
                }
            } else {
                // Not yet ready to run: just decrement the delay
            	SCH_tasks_G[Index].Delay--;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <SCH_Update+0xd8>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1e59      	subs	r1, r3, #1
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <SCH_Update+0xd8>)
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4403      	add	r3, r0
 8001464:	3304      	adds	r3, #4
 8001466:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3301      	adds	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b27      	cmp	r3, #39	; 0x27
 8001472:	d99f      	bls.n	80013b4 <SCH_Update+0xc>

            }
        }
    }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	200000d4 	.word	0x200000d4

08001484 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
    // First find a gap in the array (if there is one)
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001494:	e002      	b.n	800149c <SCH_Add_Task+0x18>
    {
       Index++;
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	3301      	adds	r3, #1
 800149a:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 800149c:	7dfa      	ldrb	r2, [r7, #23]
 800149e:	4920      	ldr	r1, [pc, #128]	; (8001520 <SCH_Add_Task+0x9c>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <SCH_Add_Task+0x32>
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b27      	cmp	r3, #39	; 0x27
 80014b4:	d9ef      	bls.n	8001496 <SCH_Add_Task+0x12>
    }
    // Have we reached the end of the list?
    if (Index == SCH_MAX_TASKS)
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b28      	cmp	r3, #40	; 0x28
 80014ba:	d104      	bne.n	80014c6 <SCH_Add_Task+0x42>
    {
        // Task list is full
        // Set the global error variable
        Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <SCH_Add_Task+0xa0>)
 80014be:	2234      	movs	r2, #52	; 0x34
 80014c0:	701a      	strb	r2, [r3, #0]
        // Also return an error code
        return SCH_MAX_TASKS;
 80014c2:	2328      	movs	r3, #40	; 0x28
 80014c4:	e027      	b.n	8001516 <SCH_Add_Task+0x92>
    }
    // If we're here, there is a space in the task array
    SCH_tasks_G[Index].pTask = pFunction;
 80014c6:	7dfa      	ldrb	r2, [r7, #23]
 80014c8:	4915      	ldr	r1, [pc, #84]	; (8001520 <SCH_Add_Task+0x9c>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 80014d8:	7dfa      	ldrb	r2, [r7, #23]
 80014da:	4911      	ldr	r1, [pc, #68]	; (8001520 <SCH_Add_Task+0x9c>)
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3304      	adds	r3, #4
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 80014ec:	7dfa      	ldrb	r2, [r7, #23]
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <SCH_Add_Task+0x9c>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3308      	adds	r3, #8
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 8001500:	7dfa      	ldrb	r2, [r7, #23]
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <SCH_Add_Task+0x9c>)
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	330c      	adds	r3, #12
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
    // return position of task (to allow later deletion)
    return Index;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200000d4 	.word	0x200000d4
 8001524:	20000080 	.word	0x20000080

08001528 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e03a      	b.n	80015aa <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	4921      	ldr	r1, [pc, #132]	; (80015bc <SCH_Dispatch_Tasks+0x94>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	330c      	adds	r3, #12
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d02c      	beq.n	80015a4 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	491b      	ldr	r1, [pc, #108]	; (80015bc <SCH_Dispatch_Tasks+0x94>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	4917      	ldr	r1, [pc, #92]	; (80015bc <SCH_Dispatch_Tasks+0x94>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	330c      	adds	r3, #12
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	b2d8      	uxtb	r0, r3
 8001574:	4911      	ldr	r1, [pc, #68]	; (80015bc <SCH_Dispatch_Tasks+0x94>)
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	330c      	adds	r3, #12
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <SCH_Dispatch_Tasks+0x94>)
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	3308      	adds	r3, #8
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <SCH_Dispatch_Tasks+0x7c>
            {

                SCH_Delete_Task(Index);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f80e 	bl	80015c0 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3301      	adds	r3, #1
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b27      	cmp	r3, #39	; 0x27
 80015ae:	d9c1      	bls.n	8001534 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000d4 	.word	0x200000d4

080015c0 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task( uint32_t taskID){
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    unsigned char Return_code;
    if (SCH_tasks_G[taskID].pTask == 0 || taskID > SCH_MAX_TASKS) {
 80015c8:	4920      	ldr	r1, [pc, #128]	; (800164c <SCH_Delete_Task+0x8c>)
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <SCH_Delete_Task+0x22>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b28      	cmp	r3, #40	; 0x28
 80015e0:	d905      	bls.n	80015ee <SCH_Delete_Task+0x2e>
        // No task at this location...
        //
        // Set the global error variable
        Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <SCH_Delete_Task+0x90>)
 80015e4:	2233      	movs	r2, #51	; 0x33
 80015e6:	701a      	strb	r2, [r3, #0]

        // ...also return an error code
        Return_code = RETURN_ERROR;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	e001      	b.n	80015f2 <SCH_Delete_Task+0x32>
    } else {
        Return_code = RETURN_NORMAL;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
    }
    SCH_tasks_G[taskID].pTask = 0;
 80015f2:	4916      	ldr	r1, [pc, #88]	; (800164c <SCH_Delete_Task+0x8c>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Delay = 0;
 8001604:	4911      	ldr	r1, [pc, #68]	; (800164c <SCH_Delete_Task+0x8c>)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3304      	adds	r3, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Period = 0;
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <SCH_Delete_Task+0x8c>)
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3308      	adds	r3, #8
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].RunMe = 0;
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <SCH_Delete_Task+0x8c>)
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	330c      	adds	r3, #12
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    return Return_code; // return status
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	200000d4 	.word	0x200000d4
 8001650:	20000080 	.word	0x20000080

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_MspInit+0x5c>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_MspInit+0x5c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_MspInit+0x5c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_MspInit+0x5c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_MspInit+0x60>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_MspInit+0x60>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c8:	d113      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	201c      	movs	r0, #28
 80016e8:	f000 f9a1 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ec:	201c      	movs	r0, #28
 80016ee:	f000 f9ba 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f000 f87f 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM2_IRQHandler+0x10>)
 8001756:	f000 ffe7 	bl	8002728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000008c 	.word	0x2000008c

08001764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	; (80017a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	; (80017b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001796:	f7ff ffe5 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179a:	f001 fb0d 	bl	8002db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179e:	f7ff fcb7 	bl	8001110 <main>
  bx lr
 80017a2:	4770      	bx	lr
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80017ac:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 80017b0:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80017b4:	200003f8 	.word	0x200003f8

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_Init+0x28>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_Init+0x28>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 f923 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f000 f808 	bl	80017e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff ff3c 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x54>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x58>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f93b 	bl	8001a82 <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f903 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_InitTick+0x5c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000040 	.word	0x20000040
 8001840:	20000048 	.word	0x20000048
 8001844:	20000044 	.word	0x20000044

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x20>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000048 	.word	0x20000048
 8001868:	200003f4 	.word	0x200003f4

0800186c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	200003f4 	.word	0x200003f4

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4906      	ldr	r1, [pc, #24]	; (8001918 <__NVIC_EnableIRQ+0x34>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff90 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff2d 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff42 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff90 	bl	8001970 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5f 	bl	800191c <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff35 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e148      	b.n	8001d42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8137 	bne.w	8001d3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4aa3      	ldr	r2, [pc, #652]	; (8001d60 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d05e      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ad8:	4aa1      	ldr	r2, [pc, #644]	; (8001d60 <HAL_GPIO_Init+0x2c4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d875      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001ade:	4aa1      	ldr	r2, [pc, #644]	; (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d058      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a9f      	ldr	r2, [pc, #636]	; (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d86f      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001aea:	4a9f      	ldr	r2, [pc, #636]	; (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d052      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001af0:	4a9d      	ldr	r2, [pc, #628]	; (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d869      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001af6:	4a9d      	ldr	r2, [pc, #628]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04c      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001afc:	4a9b      	ldr	r2, [pc, #620]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d863      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b02:	4a9b      	ldr	r2, [pc, #620]	; (8001d70 <HAL_GPIO_Init+0x2d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d046      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001b08:	4a99      	ldr	r2, [pc, #612]	; (8001d70 <HAL_GPIO_Init+0x2d4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d85d      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d82a      	bhi.n	8001b68 <HAL_GPIO_Init+0xcc>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d859      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_GPIO_Init+0x80>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001b71 	.word	0x08001b71
 8001b24:	08001b83 	.word	0x08001b83
 8001b28:	08001bc5 	.word	0x08001bc5
 8001b2c:	08001bcb 	.word	0x08001bcb
 8001b30:	08001bcb 	.word	0x08001bcb
 8001b34:	08001bcb 	.word	0x08001bcb
 8001b38:	08001bcb 	.word	0x08001bcb
 8001b3c:	08001bcb 	.word	0x08001bcb
 8001b40:	08001bcb 	.word	0x08001bcb
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001bcb 	.word	0x08001bcb
 8001b4c:	08001bcb 	.word	0x08001bcb
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001bcb 	.word	0x08001bcb
 8001b58:	08001bcb 	.word	0x08001bcb
 8001b5c:	08001bcb 	.word	0x08001bcb
 8001b60:	08001b79 	.word	0x08001b79
 8001b64:	08001b8d 	.word	0x08001b8d
 8001b68:	4a82      	ldr	r2, [pc, #520]	; (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6e:	e02c      	b.n	8001bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e029      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e024      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	3308      	adds	r3, #8
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e01f      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	330c      	adds	r3, #12
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e01a      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e013      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	611a      	str	r2, [r3, #16]
          break;
 8001bb6:	e009      	b.n	8001bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	615a      	str	r2, [r3, #20]
          break;
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          break;
 8001bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2bff      	cmp	r3, #255	; 0xff
 8001bd0:	d801      	bhi.n	8001bd6 <HAL_GPIO_Init+0x13a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_Init+0x13e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d802      	bhi.n	8001be8 <HAL_GPIO_Init+0x14c>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x152>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	3b08      	subs	r3, #8
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8090 	beq.w	8001d3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c1c:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x2e0>)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_GPIO_Init+0x2e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1e0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1d8>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e004      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8e:	493b      	ldr	r1, [pc, #236]	; (8001d7c <HAL_GPIO_Init+0x2e0>)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4933      	ldr	r1, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	492d      	ldr	r1, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4923      	ldr	r1, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4919      	ldr	r1, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3301      	adds	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f aeaf 	bne.w	8001ab0 <HAL_GPIO_Init+0x14>
  }
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	372c      	adds	r7, #44	; 0x2c
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e26c      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b92      	ldr	r3, [pc, #584]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x12c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e246      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x76>
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xbc>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fcb6 	bl	800186c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fcb2 	bl	800186c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1fa      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe4>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fca2 	bl	800186c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fc9e 	bl	800186c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1e6      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x10c>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1ba      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4939      	ldr	r1, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fc57 	bl	800186c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fc53 	bl	800186c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e19b      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc36 	bl	800186c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fc32 	bl	800186c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e17a      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03a      	beq.n	80020a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7ff fc16 	bl	800186c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fc12 	bl	800186c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e15a      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 faa6 	bl	80025b4 <RCC_Delay>
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fbfc 	bl	800186c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fbf8 	bl	800186c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d908      	bls.n	8002098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e140      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e9      	bne.n	8002078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a6 	beq.w	80021fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b97      	ldr	r3, [pc, #604]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b94      	ldr	r3, [pc, #592]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a93      	ldr	r2, [pc, #588]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b8e      	ldr	r3, [pc, #568]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a8a      	ldr	r2, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fbb9 	bl	800186c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7ff fbb5 	bl	800186c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0fd      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002124:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x334>
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a72      	ldr	r2, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x356>
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6c      	ldr	r2, [pc, #432]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b64      	ldr	r3, [pc, #400]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a63      	ldr	r2, [pc, #396]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fb69 	bl	800186c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fb65 	bl	800186c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0ab      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x37e>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fb53 	bl	800186c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fb4f 	bl	800186c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e095      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a47      	ldr	r2, [pc, #284]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8081 	beq.w	800230a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d061      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d146      	bne.n	80022aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fb23 	bl	800186c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fb1f 	bl	800186c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e067      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	492d      	ldr	r1, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a19      	ldr	r1, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	430b      	orrs	r3, r1
 8002276:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff faf3 	bl	800186c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff faef 	bl	800186c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e037      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
 80022a8:	e02f      	b.n	800230a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fadc 	bl	800186c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff fad8 	bl	800186c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e020      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x498>
 80022d6:	e018      	b.n	800230a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e013      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	42420060 	.word	0x42420060

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d0      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4965      	ldr	r1, [pc, #404]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e073      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7ff fa2c 	bl	800186c <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff fa28 	bl	800186c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e053      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f98a 	bl	80017e8 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08002e38 	.word	0x08002e38
 80024ec:	20000040 	.word	0x20000040
 80024f0:	20000044 	.word	0x20000044

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b490      	push	{r4, r7}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024fc:	1d3c      	adds	r4, r7, #4
 80024fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002504:	f240 2301 	movw	r3, #513	; 0x201
 8002508:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x40>
 800252e:	2b08      	cmp	r3, #8
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x46>
 8002532:	e02d      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002536:	623b      	str	r3, [r7, #32]
      break;
 8002538:	e02d      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	0c9b      	lsrs	r3, r3, #18
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002546:	4413      	add	r3, r2
 8002548:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800254c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	0c5b      	lsrs	r3, r3, #17
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002566:	4413      	add	r3, r2
 8002568:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800256c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002572:	fb02 f203 	mul.w	r2, r2, r3
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
 800257e:	e004      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	623b      	str	r3, [r7, #32]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6a3b      	ldr	r3, [r7, #32]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc90      	pop	{r4, r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	08002e28 	.word	0x08002e28
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	003d0900 	.word	0x003d0900

080025b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <RCC_Delay+0x34>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <RCC_Delay+0x38>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d0:	bf00      	nop
  }
  while (Delay --);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	60fa      	str	r2, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f9      	bne.n	80025d0 <RCC_Delay+0x1c>
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000040 	.word	0x20000040
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e041      	b.n	8002686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f84e 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fa6a 	bl	8002b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e035      	b.n	8002714 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIM_Base_Start_IT+0x90>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x4e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d004      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x4e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_TIM_Base_Start_IT+0x94>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b06      	cmp	r3, #6
 80026ee:	d010      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	e007      	b.n	8002712 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400

08002728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0202 	mvn.w	r2, #2
 8002754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f9b1 	bl	8002ad2 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9a4 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9b3 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0204 	mvn.w	r2, #4
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f987 	bl	8002ad2 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f97a 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f989 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d122      	bne.n	800282c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d11b      	bne.n	800282c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0208 	mvn.w	r2, #8
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2204      	movs	r2, #4
 8002802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f95d 	bl	8002ad2 <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f950 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f95f 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b10      	cmp	r3, #16
 8002838:	d122      	bne.n	8002880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0210 	mvn.w	r2, #16
 8002850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2208      	movs	r2, #8
 8002856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f933 	bl	8002ad2 <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f926 	bl	8002ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f935 	bl	8002ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d10e      	bne.n	80028ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0201 	mvn.w	r2, #1
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fd54 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b80      	cmp	r3, #128	; 0x80
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa67 	bl	8002da6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8f9 	bl	8002af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d10e      	bne.n	8002930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d107      	bne.n	8002930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa32 	bl	8002d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e0b3      	b.n	8002ab8 <HAL_TIM_ConfigClockSource+0x180>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800296e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002988:	d03e      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xd0>
 800298a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298e:	f200 8087 	bhi.w	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	f000 8085 	beq.w	8002aa4 <HAL_TIM_ConfigClockSource+0x16c>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d87f      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029a0:	2b70      	cmp	r3, #112	; 0x70
 80029a2:	d01a      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xa2>
 80029a4:	2b70      	cmp	r3, #112	; 0x70
 80029a6:	d87b      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029a8:	2b60      	cmp	r3, #96	; 0x60
 80029aa:	d050      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x116>
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d877      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029b0:	2b50      	cmp	r3, #80	; 0x50
 80029b2:	d03c      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0xf6>
 80029b4:	2b50      	cmp	r3, #80	; 0x50
 80029b6:	d873      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d058      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x136>
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d86f      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029c0:	2b30      	cmp	r3, #48	; 0x30
 80029c2:	d064      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x156>
 80029c4:	2b30      	cmp	r3, #48	; 0x30
 80029c6:	d86b      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d060      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x156>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d867      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d05c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x156>
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d05a      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029d8:	e062      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f000 f95c 	bl	8002ca6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	609a      	str	r2, [r3, #8]
      break;
 8002a06:	e04e      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f000 f945 	bl	8002ca6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2a:	609a      	str	r2, [r3, #8]
      break;
 8002a2c:	e03b      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f8bc 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2150      	movs	r1, #80	; 0x50
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f913 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e02b      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f8da 	bl	8002c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2160      	movs	r1, #96	; 0x60
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f903 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e01b      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 f89c 	bl	8002bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f8f3 	bl	8002c72 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e00b      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f000 f8ea 	bl	8002c72 <TIM_ITRx_SetConfig>
        break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002aa4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <TIM_Base_SetConfig+0xa8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_Base_SetConfig+0x28>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d003      	beq.n	8002b30 <TIM_Base_SetConfig+0x28>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <TIM_Base_SetConfig+0xac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <TIM_Base_SetConfig+0xa8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <TIM_Base_SetConfig+0x52>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0x52>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <TIM_Base_SetConfig+0xac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <TIM_Base_SetConfig+0xa8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 030a 	bic.w	r3, r3, #10
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 0210 	bic.w	r2, r3, #16
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	031b      	lsls	r3, r3, #12
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	621a      	str	r2, [r3, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f043 0307 	orr.w	r3, r3, #7
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	021a      	lsls	r2, r3, #8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e041      	b.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d004      	beq.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10c      	bne.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400

08002d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <__libc_init_array>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	2600      	movs	r6, #0
 8002dbc:	4d0c      	ldr	r5, [pc, #48]	; (8002df0 <__libc_init_array+0x38>)
 8002dbe:	4c0d      	ldr	r4, [pc, #52]	; (8002df4 <__libc_init_array+0x3c>)
 8002dc0:	1b64      	subs	r4, r4, r5
 8002dc2:	10a4      	asrs	r4, r4, #2
 8002dc4:	42a6      	cmp	r6, r4
 8002dc6:	d109      	bne.n	8002ddc <__libc_init_array+0x24>
 8002dc8:	f000 f822 	bl	8002e10 <_init>
 8002dcc:	2600      	movs	r6, #0
 8002dce:	4d0a      	ldr	r5, [pc, #40]	; (8002df8 <__libc_init_array+0x40>)
 8002dd0:	4c0a      	ldr	r4, [pc, #40]	; (8002dfc <__libc_init_array+0x44>)
 8002dd2:	1b64      	subs	r4, r4, r5
 8002dd4:	10a4      	asrs	r4, r4, #2
 8002dd6:	42a6      	cmp	r6, r4
 8002dd8:	d105      	bne.n	8002de6 <__libc_init_array+0x2e>
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de0:	4798      	blx	r3
 8002de2:	3601      	adds	r6, #1
 8002de4:	e7ee      	b.n	8002dc4 <__libc_init_array+0xc>
 8002de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dea:	4798      	blx	r3
 8002dec:	3601      	adds	r6, #1
 8002dee:	e7f2      	b.n	8002dd6 <__libc_init_array+0x1e>
 8002df0:	08002e48 	.word	0x08002e48
 8002df4:	08002e48 	.word	0x08002e48
 8002df8:	08002e48 	.word	0x08002e48
 8002dfc:	08002e4c 	.word	0x08002e4c

08002e00 <memset>:
 8002e00:	4603      	mov	r3, r0
 8002e02:	4402      	add	r2, r0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memset+0xa>
 8002e08:	4770      	bx	lr
 8002e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0e:	e7f9      	b.n	8002e04 <memset+0x4>

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
